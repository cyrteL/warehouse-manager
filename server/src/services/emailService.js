import nodemailer from 'nodemailer';
import { pool } from '../config/db.js';

class EmailService {
    constructor() {
        this.transporter = null;
        this.init();
    }

    async init() {
        try {
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
            this.transporter = nodemailer.createTransporter({
                host: process.env.SMTP_HOST || 'smtp.gmail.com',
                port: process.env.SMTP_PORT || 587,
                secure: false, // true –¥–ª—è 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
                auth: {
                    user: process.env.SMTP_USER,
                    pass: process.env.SMTP_PASS
                }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await this.transporter.verify();
            console.log('Email —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ email —Å–µ—Ä–≤–∏—Å–∞:', error);
            // –°–æ–∑–¥–∞–µ–º –º–æ–∫-—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
            this.transporter = {
                sendMail: async (options) => {
                    console.log('üìß –î–ï–ú–û-–†–ï–ñ–ò–ú: Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', {
                        to: options.to,
                        subject: options.subject,
                        text: options.text
                    });
                    return { messageId: 'demo-' + Date.now() };
                }
            };
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ
    async sendLowStockAlert(user, items) {
        try {
            const itemList = items.map(item => 
                `- ${item.name}: ${item.quantity} —à—Ç. (–º–∏–Ω. ${item.minQuantity} —à—Ç.)`
            ).join('\n');

            const emailContent = {
                to: user.email,
                subject: '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #dc3545;">‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º</h2>
                        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!</p>
                        <p>–°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º –Ω–∞ —Å–∫–ª–∞–¥–µ:</p>
                        <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0;">
                            <pre style="margin: 0; font-family: monospace;">${itemList}</pre>
                        </div>
                        <p><strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</strong></p>
                        <ul>
                            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ</li>
                            <li>–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</li>
                            <li>–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏</li>
                        </ul>
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="color: #666; font-size: 12px;">
                            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.<br>
                            –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                `
            };

            return await this.sendEmail(emailContent);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
    async sendOperationNotification(user, operation) {
        try {
            const operationType = operation.type === 'incoming' ? '–ü—Ä–∏—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥';
            const typeColor = operation.type === 'incoming' ? '#28a745' : '#ffc107';

            const emailContent = {
                to: user.email,
                subject: `üì¶ –û–ø–µ—Ä–∞—Ü–∏—è: ${operationType} - ${operation.itemName}`,
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: ${typeColor};">üì¶ –û–ø–µ—Ä–∞—Ü–∏—è: ${operationType}</h2>
                        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!</p>
                        <p>–ë—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ:</p>
                        
                        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 20px; border-radius: 5px; margin: 20px 0;">
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold;">–¢–æ–≤–∞—Ä:</td>
                                    <td style="padding: 8px 0;">${operation.itemName}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</td>
                                    <td style="padding: 8px 0;">${operation.quantity} —à—Ç.</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold;">–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:</td>
                                    <td style="padding: 8px 0; color: ${typeColor}; font-weight: bold;">${operationType}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold;">–î–∞—Ç–∞:</td>
                                    <td style="padding: 8px 0;">${new Date(operation.date).toLocaleString('ru-RU')}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0; font-weight: bold;">–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</td>
                                    <td style="padding: 8px 0;">${operation.employeeName}</td>
                                </tr>
                            </table>
                        </div>
                        
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="color: #666; font-size: 12px;">
                            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.<br>
                            –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                `
            };

            return await this.sendEmail(emailContent);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    async sendWeeklyReport(user, report) {
        try {
            const emailContent = {
                to: user.email,
                subject: 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å–∫–ª–∞–¥–∞',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #007bff;">üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</h2>
                        <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.name}!</p>
                        <p>–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º —Å–∫–ª–∞–¥–∞:</p>
                        
                        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 20px; border-radius: 5px; margin: 20px 0;">
                            <h3 style="margin-top: 0;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:</h3>
                            <table style="width: 100%; border-collapse: collapse;">
                                <tr style="background-color: #e9ecef;">
                                    <td style="padding: 12px; border: 1px solid #dee2e6; font-weight: bold;">–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å</td>
                                    <td style="padding: 12px; border: 1px solid #dee2e6; font-weight: bold;">–ó–Ω–∞—á–µ–Ω–∏–µ</td>
                                </tr>
                                <tr>
                                    <td style="padding: 12px; border: 1px solid #dee2e6;">–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π</td>
                                    <td style="padding: 12px; border: 1px solid #dee2e6;">${report.totalOperations}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 12px; border: 1px solid #dee2e6;">–ü—Ä–∏—Ö–æ–¥—ã</td>
                                    <td style="padding: 12px; border: 1px solid #dee2e6; color: #28a745;">${report.incoming}</td>
                                </tr>
                                <tr>
                                    <td style="padding: 12px; border: 1px solid #dee2e6;">–†–∞—Å—Ö–æ–¥—ã</td>
                                    <td style="padding: 12px; border: 1px solid #dee2e6; color: #ffc107;">${report.outgoing}</td>
                                </tr>
                            </table>
                        </div>
                        
                        ${report.operations.length > 0 ? `
                        <div style="background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 20px; border-radius: 5px; margin: 20px 0;">
                            <h3 style="margin-top: 0;">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</h3>
                            <table style="width: 100%; border-collapse: collapse; font-size: 12px;">
                                <tr style="background-color: #e9ecef;">
                                    <td style="padding: 8px; border: 1px solid #dee2e6; font-weight: bold;">–î–∞—Ç–∞</td>
                                    <td style="padding: 8px; border: 1px solid #dee2e6; font-weight: bold;">–¢–∏–ø</td>
                                    <td style="padding: 8px; border: 1px solid #dee2e6; font-weight: bold;">–¢–æ–≤–∞—Ä</td>
                                    <td style="padding: 8px; border: 1px solid #dee2e6; font-weight: bold;">–ö–æ–ª-–≤–æ</td>
                                </tr>
                                ${report.operations.slice(0, 10).map(op => `
                                    <tr>
                                        <td style="padding: 8px; border: 1px solid #dee2e6;">${new Date(op.date).toLocaleDateString('ru-RU')}</td>
                                        <td style="padding: 8px; border: 1px solid #dee2e6; color: ${op.type === 'incoming' ? '#28a745' : '#ffc107'};">${op.type === 'incoming' ? '–ü—Ä–∏—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥'}</td>
                                        <td style="padding: 8px; border: 1px solid #dee2e6;">${op.itemName}</td>
                                        <td style="padding: 8px; border: 1px solid #dee2e6;">${op.quantity}</td>
                                    </tr>
                                `).join('')}
                            </table>
                        </div>
                        ` : ''}
                        
                        <hr style="margin: 30px 0; border: none; border-top: 1px solid #eee;">
                        <p style="color: #666; font-size: 12px;">
                            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–æ–º.<br>
                            –î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleString('ru-RU')}
                        </p>
                    </div>
                `
            };

            return await this.sendEmail(emailContent);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error);
            throw error;
        }
    }

    // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    async sendEmail(emailContent) {
        try {
            const mailOptions = {
                from: process.env.SMTP_FROM || process.env.SMTP_USER,
                to: emailContent.to,
                subject: emailContent.subject,
                html: emailContent.html
            };

            const result = await this.transporter.sendMail(mailOptions);
            console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ:', result.messageId);
            return result;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    async getUsersWithNotifications(notificationType) {
        try {
            const [rows] = await pool.execute(`
                SELECT u.id, u.name, u.email, u.department, u.position
                FROM users u
                WHERE u.active = 1
            `);

            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return rows;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
            return [];
        }
    }
}

export default new EmailService();
